import re
import slack
import time
import asyncio
import concurrent
from datetime import datetime
import os
import logging
from slack import RTMClient
from slack.errors import SlackApiError
from actions import edit, store, answer

logger = logging.getLogger(__name__)
read_env = lambda property: os.environ.get(property, None)


@RTMClient.run_on(event='message')
async def process_messages(**payload):
    data = payload['data']
    logger.info(f"SLACK DAEMON - WE GOT SOMETHING {data}")

    if 'text' in data:
        logger.info(f"text was in data {data['text']}")
        if 'store' in data.get('text', []):
            print("sending store")
            logger.info("sending store") 
            store(payload)
        elif 'answer' in data.get('text', []):
            print("sending answer")
            logger.info("sending answer")
            answer(payload)
        elif 'edit' in data.get('text', []):
            print("sending edit")
            logger.info("sending edit")
            edit(payload) 


def sync_loop():
    while True:
        logger.info("Slackbot heartbeat: ", datetime.now())
        time.sleep(5)


async def slack_main():
    loop = asyncio.get_event_loop()
    token=read_env("SLACK_TOKEN")
    rtm_client = slack.RTMClient(token=token, run_async=True, loop=loop)
    executor = concurrent.futures.ThreadPoolExecutor(max_workers=1)
    await asyncio.gather(
        loop.run_in_executor(executor, sync_loop),
        rtm_client.start()
    )


if __name__ == "__main__":
    asyncio.run(slack_main())

#@RTMClient.run_on(event='message')
#def say_hello(**payload):
#    print(f"I GOT SOMETHING {payload}")
#    data = payload['data']
#    web_client = payload['web_client']

#    if 'text' in data and 'Hello' in data.get('text', []):
        
#        channel_id = data['channel']
#        thread_ts = data['ts']
#        user = data['user']

#        try:
#            response = web_client.chat_postMessage(
#                display_as_bot=False,
#                channel=channel_id,
#                text=f"Hi <@{user}>!",
#                username="Dmitry Roitman",
#                as_user=True,
#                thread_ts=None#thread_ts
#            )
#        except SlackApiError as e:
#            # You will get a SlackApiError if "ok" is False
#            assert e.response["ok"] is False
#            assert e.response["error"]  # str like 'invalid_auth', 'channel_not_found'
#            print(f"Got an error: {e.response['error']}")


#def main():
#    token=read_env("SLACK_TOKEN")
#    rtm_client = RTMClient(token=token)
#    rtm_client.start()
#    logger.info("Runnign slack monitor ... ")


#if __name__=='__main__':
#    main()
