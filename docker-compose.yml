version: '3.7'
services:
  postgres:
    container_name: ${PROJECT_NAME}-postgres
    image: postgres:alpine
    volumes:
      - ./api/sql/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./api/sql/data.sql:/docker-entrypoint-initdb.d/2-data.sql
      - pg_data:/var/lib/postgresql/pg_data
    env_file:
      - .env
    networks:
      - neo4j_net
    ports:
      - "5432:5432"
    restart: always # ignored when deploying a stack in swarm mode or kubernetes
    deploy: # ignored by docker-compose
      restart_policy:
        condition: on-failure

  api:
    container_name: ${PROJECT_NAME}-api
    build:
      context: ./api
      dockerfile: Dockerfile
    restart: always
    ports:
     - 5000:5000
    restart: always
    env_file:
      - .env
    depends_on:
      - kafka
      - redis
      - neo4j
    env_file:
      - .env
    networks:
      - neo4j_net
    volumes:
      - './api/:/usr/app'

  neo4j:
    container_name: ${PROJECT_NAME}-neo4j
    env_file:
      - .env
    restart: on-failure
    build:
      context: ./neo4j
      dockerfile: Dockerfile
    ports:
      - 7473:7473
      - 7474:7474
      - 7687:7687
    volumes:
      - ./neo4j:/neo4j
      - neo4j__data:/data
    networks:
      - neo4j_net
    deploy:
      replicas: 1

  slackbot:
    container_name: ${PROJECT_NAME}-slackbot
    build: 
      context: ./slackbot
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      - redis
    networks:
      - neo4j_net
    ports:
      - 8765:8765
  kafka:
    container_name: ${PROJECT_NAME}-kafka
    env_file:
      - .env
    image: confluentinc/cp-kafka:latest
    ports:
      - 29092:29092
      - 9092:9092
    networks:
      - neo4j_net
    deploy:
      replicas: 1
    depends_on:
      - zookeeper

  zookeeper:
    container_name: ${PROJECT_NAME}-zookeeper
    image: confluentinc/cp-zookeeper:latest
    env_file:
      - .env
    ports:
      - 32181:32181
      - 2181:2181
    networks:
      - neo4j_net
    volumes:
      - zoo_data:/data
      - zoo_datalog:/datalog
    deploy:
      replicas: 1

#  lex:
#    container_name: ${PROJECT_NAME}-lex
#    build: ./lex
#    ports:
#      - "8888:8888/tcp"
#    env_file:
#      - .env
#    command: python run.py


  daemon:
    container_name: ${PROJECT_NAME}-daemon
    build:
      context: ./daemon
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      - kafka
      - redis
      - neo4j
    networks:
      - neo4j_net
    volumes:
      - './daemon/:/usr/app'
    ports:
      - 19091:19091
      - 8001:8001
    
#  neo4j_browser:
#    container_name: ${PROJECT_NAME}-browser
#    build: ./neo4j_browser
#    env_file:
#      - .env
#    depends_on:
#      - neo4j
#    ports:
#     - 8082:8082

#  admin:
#    container_name: ${PROJECT_NAME}-admin
#    build: ./admin
#    env_file:
#      - .env
#    depends_on:
#      - api
#    ports:
#     - "8000:8000"


  schema-registry:
    image: confluentinc/cp-schema-registry:5.4.0
    hostname: schema-registry
    container_name: ${PROJECT_NAME}-schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    networks:
      - neo4j_net
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"

  redis:
    container_name: ${PROJECT_NAME}-redis
    image: redis
    ports:
      - "6379:6379"
    env_file:
      - .env
    networks:
      - neo4j_net

networks:
  neo4j_net:
    driver: bridge

volumes:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  neo4j_conf:
  neo4j__data:
  dgraph:
  pg_data:
  neo4j_graphaware:
  kafka_data:
  sink_plugins:
  zoo_data:
  zoo_datalog:
